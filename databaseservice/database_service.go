// Code generated by goctl. DO NOT EDIT!
// Source: database-service.proto

package databaseservice

import (
	"context"
	"encoding/json"

	"database-service/pb"

	"git.ickey.com.cn/sfs/errors"
	"git.ickey.com.cn/sfs/errors/com"
	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/status"
)

type (
	BackupPlan               = pb.BackupPlan
	DmsDatabase              = pb.DmsDatabase
	DmsInstance              = pb.DmsInstance
	DmsOrder                 = pb.DmsOrder
	DmsUserInfo              = pb.DmsUserInfo
	GetDbsBackupPlanReq      = pb.GetDbsBackupPlanReq
	GetDbsBackupPlanResp     = pb.GetDbsBackupPlanResp
	GetDmsListInstanceReq    = pb.GetDmsListInstanceReq
	GetDmsListInstanceResp   = pb.GetDmsListInstanceResp
	GetDmsListOrderReq       = pb.GetDmsListOrderReq
	GetDmsListOrderResp      = pb.GetDmsListOrderResp
	GetDmsListUsersReq       = pb.GetDmsListUsersReq
	GetDmsListUsersResp      = pb.GetDmsListUsersResp
	GetDmsSearchDatabaseReq  = pb.GetDmsSearchDatabaseReq
	GetDmsSearchDatabaseResp = pb.GetDmsSearchDatabaseResp
	GetDtsSyncJobNameReq     = pb.GetDtsSyncJobNameReq
	GetDtsSyncJobNameResp    = pb.GetDtsSyncJobNameResp
	GetPersonReq             = pb.GetPersonReq
	GetPersonResp            = pb.GetPersonResp
	GetRdsInstanceReq        = pb.GetRdsInstanceReq
	GetRdsInstanceResp       = pb.GetRdsInstanceResp
	GetRdsSlowLogReq         = pb.GetRdsSlowLogReq
	GetRdsSlowLogResp        = pb.GetRdsSlowLogResp
	GetRedisInstanceReq      = pb.GetRedisInstanceReq
	GetRedisInstanceResp     = pb.GetRedisInstanceResp
	IckeyError               = pb.IckeyError
	RdsInstance              = pb.RdsInstance
	RedisInstance            = pb.RedisInstance
	Request                  = pb.Request
	Response                 = pb.Response
	SQLSlowLog               = pb.SQLSlowLog
	SyncInstance             = pb.SyncInstance

	DatabaseService interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		GetPerson(ctx context.Context, in *GetPersonReq, opts ...grpc.CallOption) (*GetPersonResp, error)
		GetRdsInstance(ctx context.Context, in *GetRdsInstanceReq, opts ...grpc.CallOption) (*GetRdsInstanceResp, error)
		GetRedisInstance(ctx context.Context, in *GetRedisInstanceReq, opts ...grpc.CallOption) (*GetRedisInstanceResp, error)
		GetDmsListOrder(ctx context.Context, in *GetDmsListOrderReq, opts ...grpc.CallOption) (*GetDmsListOrderResp, error)
		GetDmsListUsers(ctx context.Context, in *GetDmsListUsersReq, opts ...grpc.CallOption) (*GetDmsListUsersResp, error)
		GetDmsListInstance(ctx context.Context, in *GetDmsListInstanceReq, opts ...grpc.CallOption) (*GetDmsListInstanceResp, error)
		GetDmsSearchDatabase(ctx context.Context, in *GetDmsSearchDatabaseReq, opts ...grpc.CallOption) (*GetDmsSearchDatabaseResp, error)
		GetDbsBackupPlan(ctx context.Context, in *GetDbsBackupPlanReq, opts ...grpc.CallOption) (*GetDbsBackupPlanResp, error)
		GetDtsSyncJobName(ctx context.Context, in *GetDtsSyncJobNameReq, opts ...grpc.CallOption) (*GetDtsSyncJobNameResp, error)
		GetRdsSlowLog(ctx context.Context, in *GetRdsSlowLogReq, opts ...grpc.CallOption) (*GetRdsSlowLogResp, error)
	}

	defaultDatabaseService struct {
		cli zrpc.Client
	}
)

func NewDatabaseService(cli zrpc.Client) DatabaseService {
	return &defaultDatabaseService{
		cli: cli,
	}
}

func (m *defaultDatabaseService) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.Ping(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetPerson(ctx context.Context, in *GetPersonReq, opts ...grpc.CallOption) (*GetPersonResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetPerson(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetRdsInstance(ctx context.Context, in *GetRdsInstanceReq, opts ...grpc.CallOption) (*GetRdsInstanceResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetRdsInstance(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetRedisInstance(ctx context.Context, in *GetRedisInstanceReq, opts ...grpc.CallOption) (*GetRedisInstanceResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetRedisInstance(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetDmsListOrder(ctx context.Context, in *GetDmsListOrderReq, opts ...grpc.CallOption) (*GetDmsListOrderResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetDmsListOrder(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetDmsListUsers(ctx context.Context, in *GetDmsListUsersReq, opts ...grpc.CallOption) (*GetDmsListUsersResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetDmsListUsers(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetDmsListInstance(ctx context.Context, in *GetDmsListInstanceReq, opts ...grpc.CallOption) (*GetDmsListInstanceResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetDmsListInstance(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetDmsSearchDatabase(ctx context.Context, in *GetDmsSearchDatabaseReq, opts ...grpc.CallOption) (*GetDmsSearchDatabaseResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetDmsSearchDatabase(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetDbsBackupPlan(ctx context.Context, in *GetDbsBackupPlanReq, opts ...grpc.CallOption) (*GetDbsBackupPlanResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetDbsBackupPlan(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetDtsSyncJobName(ctx context.Context, in *GetDtsSyncJobNameReq, opts ...grpc.CallOption) (*GetDtsSyncJobNameResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetDtsSyncJobName(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) GetRdsSlowLog(ctx context.Context, in *GetRdsSlowLogReq, opts ...grpc.CallOption) (*GetRdsSlowLogResp, error) {
	client := pb.NewDatabaseServiceClient(m.cli.Conn())
	resp, err := client.GetRdsSlowLog(ctx, in, opts...)
	return resp, m.getIckeyErrorFromGRPCError(err)
}

func (m *defaultDatabaseService) getIckeyErrorFromGRPCError(err error) error {
	if err == nil {
		return err
	}
	st := status.Convert(err)
	for _, detail := range st.Details() {
		switch t := detail.(type) {
		case *pb.IckeyError:
			var e errors.Content
			if err := json.Unmarshal(t.Data, &e); err != nil {
				return com.NewComJsonUnmarshalFailed(nil)
			}
			ne := errors.NewError(e.ErrCode)
			ne.Copy(&e)
			return ne
		default:
			return err
		}
	}
	return err
}
